{"version":3,"sources":["App.js","serviceWorker.js","index.js","beep.mp3"],"names":["Display","props","minutes","Math","floor","display","seconds","styleStringToDisplay","stringToDisplay","finalFormat","toString","finalDisplay","react_default","a","createElement","className","style","height","marginLeft","marginRight","backgroundColor","id","width","minWidth","borderRadius","fontSize","fontWeight","color","break","onClick","breakPlus","breakMinus","session","sessionPlus","sessionMinus","buttonToggle","timerStart","breakStart","reset","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timeLeft","initialTime","startIfTrue","changeTimesIfTrue","bind","assertThisInitialized","timerStartWithoutButton","breakStartWithoutButton","audio01","Audio","beep","setState","_this2","interval","setInterval","clearingInterval","setTimeout","clearInterval","audio","play","breakStarting","_this3","_this4","interval2","clearingInterval2","audio2","breakStarting2","_this5","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.82fff07b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport beep from \"./beep.mp3\";\n\n///https://www.freesoundeffects.com/  source of the sound effect\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //always changing during the run, displayed in the app\n      timeLeft: 1500,\n      //changes during the change from session to break and break to session\n      //used to give proper time to setInterval functions\n      initialTime: 1500,\n      //doesn't change during the run\n      session: 1500,\n      //doesn't change during the run\n      break: 300,\n      ///displays Session or Break\n      stringToDisplay: \"Session\",\n      // if true: start/pause acts as start, if false it acts as a pause\n      startIfTrue: true,\n      //session and break times can be changed if true\n      //initial state: true -> start-button: false -> reset btn:true\n      changeTimesIfTrue: true\n    };\n\n    this.sessionMinus = this.sessionMinus.bind(this);\n    this.sessionPlus = this.sessionPlus.bind(this);\n    this.breakMinus = this.breakMinus.bind(this);\n    this.breakPlus = this.breakPlus.bind(this);\n\n    this.timerStart = this.timerStart.bind(this);\n    this.timerStartWithoutButton = this.timerStartWithoutButton.bind(this);\n    this.breakStart = this.breakStart.bind(this);\n    this.breakStartWithoutButton = this.breakStartWithoutButton.bind(this);\n\n    this.buttonToggle = this.buttonToggle.bind(this);\n    this.reset = this.reset.bind(this);\n\n    this.audio01 = new Audio(beep);\n  }\n\n  sessionMinus() {\n    if (!this.state.changeTimesIfTrue) {\n      return;\n    }\n\n    if (this.state.timeLeft > 60) {\n      this.setState({\n        timeLeft: this.state.timeLeft - 60,\n        initialTime: this.state.initialTime - 60,\n        session: this.state.session - 60\n      });\n    }\n  }\n\n  sessionPlus() {\n    if (!this.state.changeTimesIfTrue) {\n      return;\n    }\n\n    if (this.state.timeLeft <= 3540) {\n      this.setState({\n        timeLeft: this.state.timeLeft + 60,\n        initialTime: this.state.initialTime + 60,\n        session: this.state.session + 60\n      });\n    }\n  }\n\n  breakMinus() {\n    if (!this.state.changeTimesIfTrue) {\n      return;\n    }\n\n    if (this.state.break > 60) {\n      this.setState({ break: this.state.break - 60 });\n    }\n  }\n\n  breakPlus() {\n    if (!this.state.changeTimesIfTrue) {\n      return;\n    }\n\n    if (this.state.break <= 3540) {\n      this.setState({ break: this.state.break + 60 });\n    }\n  }\n\n  // run after initiall start|pause btn is clicked, as well as if start|pause is clicked after pausing\n  // and during the 'session' mode\n  timerStart() {\n    ///works only if the program is in the session mode\n    if (this.state.stringToDisplay !== \"Session\") {\n      return;\n    }\n\n    /// preventing another execution if btn is in pause mode\n    if (!this.state.startIfTrue) {\n      return;\n    }\n\n    if (this.state.timeLeft >= -1) {\n      this.setState({\n        interval: setInterval(\n          () => this.setState({ timeLeft: this.state.timeLeft - 1 }),\n          1000\n        )\n      });\n\n      this.setState({\n        clearingInterval: setTimeout(() => {\n          clearInterval(this.state.interval);\n        }, (this.state.initialTime + 1) * 1000)\n      });\n\n      this.setState({\n        audio: setTimeout(() => {\n          this.audio01.play();\n        }, (this.state.initialTime + 1) * 1000)\n      });\n\n      this.setState({\n        breakStarting: setTimeout(() => {\n          this.breakStartWithoutButton();\n        }, (this.state.initialTime + 1) * 1000)\n      });\n    }\n  }\n\n  // works after break (click does not trigger it)\n  timerStartWithoutButton() {\n    this.setState({ stringToDisplay: \"Session\" });\n\n    if (this.state.timeLeft >= -1) {\n      this.setState({\n        timeLeft: this.state.session,\n        initialTime: this.state.session\n      });\n\n      this.setState({\n        interval: setInterval(\n          () => this.setState({ timeLeft: this.state.timeLeft - 1 }),\n          1000\n        )\n      });\n\n      this.setState({\n        clearingInterval: setTimeout(() => {\n          clearInterval(this.state.interval);\n        }, (this.state.initialTime + 1) * 1000)\n      });\n\n      this.setState({\n        audio: setTimeout(() => {\n          this.audio01.play();\n        }, (this.state.initialTime + 1) * 1000)\n      });\n\n      this.setState({\n        breakStarting: setTimeout(() => {\n          this.breakStartWithoutButton();\n        }, (this.state.initialTime + 1) * 1000)\n      });\n    }\n  }\n\n  // works when clicking Start|Reset btn after pausing if the timer is in the break mode\n  breakStart() {\n    ///works only if the program is in the break mode\n    if (this.state.stringToDisplay !== \"Break\") {\n      return;\n    }\n\n    /// preventing another execution if btn is in pause mode\n    if (!this.state.startIfTrue) {\n      return;\n    }\n\n    this.setState({\n      interval2: setInterval(\n        () => this.setState({ timeLeft: this.state.timeLeft - 1 }),\n        1000\n      )\n    });\n\n    this.setState({\n      clearingInterval2: setTimeout(() => {\n        clearInterval(this.state.interval2);\n      }, (this.state.initialTime + 1) * 1000)\n    });\n\n    this.setState({\n      audio2: setTimeout(() => {\n        this.audio01.play();\n      }, (this.state.initialTime + 1) * 1000)\n    });\n\n    this.setState({\n      breakStarting2: setTimeout(() => {\n        this.timerStartWithoutButton();\n      }, (this.state.initialTime + 1) * 1000)\n    });\n  }\n\n  // runs at the end of 'session' mode (click does not trigger it)\n  breakStartWithoutButton() {\n    this.setState({ stringToDisplay: \"Break\" });\n\n    this.setState({\n      timeLeft: this.state.break,\n      initialTime: this.state.break\n    });\n\n    this.setState({\n      interval2: setInterval(\n        () => this.setState({ timeLeft: this.state.timeLeft - 1 }),\n        1000\n      )\n    });\n\n    this.setState({\n      clearingInterval2: setTimeout(() => {\n        clearInterval(this.state.interval2);\n      }, (this.state.initialTime + 1) * 1000)\n    });\n\n    this.setState({\n      audio2: setTimeout(() => {\n        this.audio01.play();\n      }, (this.state.initialTime + 1) * 1000)\n    });\n\n    this.setState({\n      breakStarting2: setTimeout(() => {\n        this.timerStartWithoutButton();\n      }, (this.state.initialTime + 1) * 1000)\n    });\n  }\n\n  buttonToggle() {\n    this.setState({ changeTimesIfTrue: false });\n\n    if (!this.state.startIfTrue) {\n      this.setState(\n        //enabling countdown to pick up where it stopped after pausing and starting again\n        { initialTime: this.state.timeLeft }\n      );\n\n      clearInterval(this.state.interval);\n      clearInterval(this.state.interval2);\n      clearInterval(this.state.clearingInterval);\n      clearInterval(this.state.clearingInterval2);\n      clearInterval(this.state.audio);\n      clearInterval(this.state.audio2);\n      clearInterval(this.state.breakStarting);\n      clearInterval(this.state.breakStarting2);\n    }\n\n    this.setState({ startIfTrue: !this.state.startIfTrue });\n  }\n\n  reset() {\n    ///reset works also if the timer is running\n    if (!this.state.startIfTrue) {\n      this.buttonToggle();\n    }\n\n    this.setState({\n      stringToDisplay: \"Session\",\n      timeLeft: 1500,\n      initialTime: 1500,\n      session: 1500,\n      break: 300,\n      changeTimesIfTrue: true\n    });\n  }\n\n  render() {\n    return (\n      <Display\n        display={this.state.timeLeft}\n        session={this.state.session}\n        break={this.state.break}\n        sessionMinus={this.sessionMinus}\n        sessionPlus={this.sessionPlus}\n        breakMinus={this.breakMinus}\n        breakPlus={this.breakPlus}\n        timerStart={this.timerStart}\n        breakStart={this.breakStart}\n        stringToDisplay={this.state.stringToDisplay}\n        buttonToggle={this.buttonToggle}\n        reset={this.reset}\n      />\n    );\n  }\n}\n\nfunction Display(props) {\n  let minutes = Math.floor(props.display / 60);\n  let seconds = props.display - minutes * 60;\n\n  let minToString = \"\";\n  let secToString = \"\";\n\n  let styleStringToDisplay = \"\";\n\n  if (props.stringToDisplay === \"Session\") {\n    styleStringToDisplay = \"teal\";\n  }\n\n  if (props.stringToDisplay === \"Break\") {\n    styleStringToDisplay = \"crimson\";\n  }\n\n  // displaying zero in front of single digits\n  minutes >= 10\n    ? (minToString = minutes.toString())\n    : (minToString = \"0\" + minutes.toString());\n  seconds >= 10\n    ? (secToString = seconds.toString())\n    : (secToString = \"0\" + seconds.toString());\n\n  let finalFormat = minToString + \":\" + secToString;\n\n  //fix: the display will never show value less than 00:01\n  let finalDisplay = \"\";\n\n  if (props.display >= 0) {\n    finalDisplay = finalFormat;\n  } else {\n    finalDisplay = \"00:00\";\n  }\n\n  return (\n    <div className=\"App container-fluid\">\n      <div\n        className=\"d-flex align-items-center\"\n        style={{\n          height: \"100vh\",\n          marginLeft: \"-15px\",\n          marginRight: \"-15px\",\n          backgroundColor: \"white\"\n        }}\n      >\n        <div\n          id=\"drum-machine\"\n          className=\"mx-auto text-center\"\n          style={{\n            width: \"350px\",\n            height: \"450px\",\n            minWidth: \"350px\",\n            borderRadius: \"5px\",\n            backgroundColor: \"#091834\"\n          }}\n        >\n          <br />\n          <div className=\"mx-auto display-center\">\n            <p id=\"break-label\" style={{ fontSize: \"1.1em\" }}>\n              Break Length\n              <p\n                style={{\n                  fontWeight: \"bold\",\n                  color: \"crimson\",\n                  fontSize: \"1.1em\"\n                }}\n              >\n                {props.break/60}\n              </p>\n            </p>\n          </div>\n          <div className=\"d-flex justify-content-center\">\n            <button\n              className=\"btn btn-primary mx-1 btn-blue\"\n              id=\"break-increment\"\n              onClick={() => props.breakPlus()}\n            >\n              +\n            </button>\n            <button\n              className=\"btn btn-danger mx-1 btn-red\"\n              id=\"break-decrement\"\n              onClick={() => props.breakMinus()}\n            >\n              -\n            </button>\n          </div>\n\n          <br />\n\n          <div className=\"mx-auto display-center\">\n            <p id=\"session-label\" style={{ fontSize: \"1.1em\" }}>\n              Session Length\n              <p\n                style={{\n                  fontWeight: \"bold\",\n                  color: \"teal\",\n                  fontSize: \"1.1em\"\n                }}\n              >\n                {props.session/60}\n              </p>\n            </p>\n          </div>\n          <div className=\"d-flex justify-content-center\">\n            <button\n              className=\"btn btn-primary mx-1 btn-blue\"\n              id=\"session-increment\"\n              onClick={() => props.sessionPlus()}\n            >\n              +\n            </button>\n            <button\n              className=\"btn btn-danger mx-1 btn-red\"\n              id=\"session-decrement\"\n              onClick={() => props.sessionMinus()}\n            >\n              -\n            </button>\n          </div>\n          <br />\n          <div className=\"mx-auto display-center\">\n            <p\n              id=\"timer-label\"\n              style={{\n                fontSize: \"1.1em\",\n                color: styleStringToDisplay,\n                fontWeight: \"bold\"\n              }}\n            >\n              {props.stringToDisplay}\n            </p>\n          </div>\n\n          <div className=\"mx-auto display-center\">\n            <p id=\"time-left\" style={{ fontSize: \"2.2em\" }}>\n              {finalDisplay}\n            </p>\n            <audio id=\"beep\">\n            </audio>\n          </div>\n          <div className=\"d-flex justify-content-center\">\n            <button\n              className=\"btn btn-primary mx-1 btn-blue\"\n              id=\"start_stop\"\n              onClick={() => {\n                props.buttonToggle();\n                props.timerStart();\n                props.breakStart();\n              }}\n            >\n              Start | Pause\n            </button>\n            <button\n              className=\"btn btn-danger mx-1 btn-red\"\n              id=\"reset\"\n              onClick={() => {\n                props.reset();\n              }}\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/beep.b5a7b696.mp3\";"],"sourceRoot":""}